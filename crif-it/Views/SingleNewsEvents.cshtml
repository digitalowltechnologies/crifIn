@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<SingleNewsEvents>
@using Crif.It.Models;
@using Crif.It.Utils;
@using System.Web;

@{
    Layout = "Master.cshtml";

    var url = Model.Url(System.Threading.Thread.CurrentThread.CurrentCulture.Name, UrlMode.Absolute);

    var articles = Model.SiblingsAndSelf();
    var orderedArticles = articles?.OrderByDescending(articles => articles.Value("customDate"));

    var allCategories = Model.Parent?.Siblings();
    List<SingleNewsEvents> relatedArt = new List<SingleNewsEvents>();
    if (allCategories != null)
    {
        foreach (var cat in allCategories)
        {
            if (cat.Children != null && cat.Children.Any())
            {
                foreach (SingleNewsEvents art in cat.Children)
                {
                    var allRelated = art.Value<IEnumerable<IPublishedContent>>("SingleKnowledgeEventsRelatedServices");
                    if (allRelated != null)
                    {
                        foreach (var item in allRelated)
                        {
                            if (Model.SingleKnowledgeEventsRelatedServices != null)
                            {
                                foreach (var aux in Model.SingleKnowledgeEventsRelatedServices)
                                {
                                    if (item.Name == aux.Name)
                                    {
                                        relatedArt.Add(art);
                                    }
                                }
                            }
                        }
                    }
                    else if ((art.Value("singleKnowledgeEventsCountry") != null) && ((string?)art.Value("singleKnowledgeEventsCountry") == Model.SingleKnowledgeEventsCountry))
                    {
                        relatedArt.Add(art);
                    }
                }
            }
        }
    }

    string addParam = "";
    if (Umbraco.AssignedContentItem.ContentType.Alias == "singleNewsEvents")
    {
        addParam = "product=" + HttpUtility.UrlEncode(Umbraco.AssignedContentItem.Name);
    }

    string pad = "";
}
<div class="share-bar sticky-top">
    <div class="container-lg">
        <div class="row">
            <div class="col-12">
                <div class="social-wrapper">
                    <a title="LinkedIn" href="https://www.linkedin.com/share?text=@url" target="_blank" class="social linkedin">LinkedIn</a>
                    <a title="Whatsapp" href="https://web.whatsapp.com/send?text=@url" data-action="share/whatsapp/share" target="_blank" class="social whatsapp">Whatsapp</a>
                    <a title="Twitter" href="https://twitter.com/share?text=@url" target="_blank" class="social twitter">Twitter</a>
                    <a title="Facebook" href="https://www.facebook.com/sharer/sharer.php?u=@url" target="_blank" class="social facebook">Facebook</a>
                    <div title="Copy link" href="" data-url="@url" class="social link">Copy link</div>
                </div>
            </div>
        </div>
    </div>
</div>
<section class="KE-heading">
    <div class="container-lg">
        <div class="row">
            <div class="col-12 banner">
                @await(Html.PartialAsync("Breadcrumb", Model.Parent))
                @if (Model.SingleKnowledgeEventsCoverImage != null)
                {
                    <div class="image-wrapper">
                        <img src="@Model.SingleKnowledgeEventsCoverImage?.Url()" alt="@HtmlUtils.GetImageAlt(Model.SingleKnowledgeEventsCoverImage)">
                    </div>
                }
                else
                {
                    <div class="d-none d-lg-block" style="width: 100%; height: 100px"> </div>
                }
                <div class="pos-relative">
                    <div class="post-navigation d-none d-xl-flex">
                        @for (var i = 0; i < orderedArticles?.Count(); i++)
                        {
                            if (orderedArticles.ElementAt(i).Name == Model.Name)
                            {
                                if (i - 1 >= 0)
                                {
                                    <a title="prev" href="@orderedArticles.ElementAt(i - 1).Url()" class="prev"></a>
                                }
                                else
                                {
                                    <a title="prev" href="#" class="prev disabled-"></a>
                                }
                                if (i + 1 < orderedArticles.Count())
                                {
                                    <a title="next" href="@orderedArticles.ElementAt(i + 1).Url()" class="next"></a>
                                }
                                else
                                {
                                    <a title="next" href="#" class="next disabled-"></a>
                                }
                                break;
                            }
                        }
                    </div>
                </div>

                <div class="caption">
                    @if(!string.IsNullOrEmpty(Model.SingleNewsEventsTitle))
                    {
                    <h1 class="h1">
                        @if (Model.SingleKnowledgeEventsIconTitle != null)
                        {
                            <img src="@Model.SingleKnowledgeEventsIconTitle?.Url()" alt="@HtmlUtils.GetImageAlt(Model.SingleKnowledgeEventsIconTitle)">
                        }
                        @Model.SingleNewsEventsTitle
                    </h1>
                    }
                    <div class="meta">
                        <div class="tags">
                            <span class="category">@Model.Parent?.Name</span>
                            @if (Model.SingleKnowledgeEventsRelatedServices != null)
                            {
                                foreach (var service in Model.SingleKnowledgeEventsRelatedServices)
                                {
                                    <span class="accent">@service.Name</span>
                                }
                            }
                            @if (Model.SingleKnowledgeEventsCountry != "")
                            {
                                <span class="country">@Model.SingleKnowledgeEventsCountry</span>
                            }
                        </div>
                        <div class="published">
                            @Umbraco.GetDictionaryValue("last_update") @Model.CustomDate.ToString("dd/MM/yyyy")
                            <div class="post-navigation d-flex d-xl-none">
                                @for (var i = 0; i < orderedArticles?.Count(); i++)
                                {
                                    if (orderedArticles.ElementAt(i).Name == Model.Name)
                                    {
                                        if (i - 1 >= 0)
                                        {
                                            <a title="prev" href="@orderedArticles.ElementAt(i - 1).Url()" class="prev"></a>
                                        }
                                        else
                                        {
                                            <a title="prev" href="#" class="prev disabled-"></a>
                                        }
                                        if (i + 1 < orderedArticles.Count())
                                        {
                                            <a title="next" href="@orderedArticles.ElementAt(i + 1).Url()" class="next"></a>
                                        }
                                        else
                                        {
                                            <a title="next" href="#" class="next disabled-"></a>
                                        }
                                        break;
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    @if (Model.SingleKnowledgeEventsRelatedIndustries != null)
                    {
                        <div class="container-lg">
                            <div class="row justify-content-center pt-lg-4 mt-lg-2">
                                <div class="col">
                                    <div class="icon-labels justify-content-start px-0">
                                        @foreach (Industry industry in Model.SingleKnowledgeEventsRelatedIndustries)
                                        {
                                            <a title="@industry.Name" href="@industry.Url()" class="small-box-link"><img src="@industry.CoverIcon?.Url()" alt="@HtmlUtils.GetImageAlt(industry.CoverIcon)">@industry.Name</a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@if (!string.IsNullOrEmpty(Model.SingleKnowledgeEventsDateAndLocation))
{
    pad = "pt-0";
    <section class="text-content pb-0">
        <div class="container-lg">
            <div class="row justify-content-center">
                <div class="col">
                    <p>@Model.SingleKnowledgeEventsDateAndLocation</p>
                </div>
            </div>
        </div>
    </section>
}

@if (!string.IsNullOrEmpty(Model.SingleKnowledgeEventsBody?.ToString()))
{
    <section class="text-content @pad">
        <div class="container-lg">
            <div class="row justify-content-center">
                <div class="col">
                    @Html.Raw(Model.SingleKnowledgeEventsBody)
                </div>
            </div>
        </div>
    </section>
}
@Html.GetBlockListHtml(Model.SingleNewsEventsBlocks)

<section class="pt-3 pb-0 py-lg-5">
    <div class="container-lg">
        <div class="row">
            <div class="col-12">
                <ul class="pagination justify-content-center mb-5">
                    @for (var i = 0; i < orderedArticles?.Count(); i++)
                    {
                        if (orderedArticles.ElementAt(i).Name == Model.Name)
                        {
                            if (i - 1 >= 0)
                            {
                                <li class="page-item">
                                    <a title="@Umbraco.GetDictionaryValue("previous_article")" href="@orderedArticles.ElementAt(i - 1).Url()" class="page-link">@Umbraco.GetDictionaryValue("previous_article")</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled-">
                                    <a title="@Umbraco.GetDictionaryValue("previous_article")" class="page-link">@Umbraco.GetDictionaryValue("previous_article")</a>
                                </li>
                            }
                            if (i + 1 < orderedArticles.Count())
                            {
                                <li class="page-item">
                                    <a title="@Umbraco.GetDictionaryValue("next_article")" class="page-link" href="@orderedArticles.ElementAt(i + 1).Url()">@Umbraco.GetDictionaryValue("next_article")</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled-">
                                    <a title="@Umbraco.GetDictionaryValue("next_article")" class="page-link">@Umbraco.GetDictionaryValue("next_article")</a>
                                </li>
                            }
                            break;
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</section>
@if (relatedArt.Count() > 0 && Model.ShowRelatedArticles == true)
{
    int count = 1;
    <section class="vertical-cards-block bg pb-80">
        <div class="container-lg">
            @if(!string.IsNullOrEmpty(Model.RelatedArticlesTitle))
            {
            <div class="row justify-content-center">
                <div class="col-12">
                    <h2 class="h2 text-center pb-lg-5 mb-lg-4">@Model.RelatedArticlesTitle</h2>
                </div>
            </div>
            }
            <div class="row g-large">

                @foreach (SingleNewsEvents art in relatedArt)
                {
                    if (count == 3)
                    {
                        break;
                    }
                    @(await Html.PartialAsync("CardKnowledgeEvents", art, new ViewDataDictionary(ViewData){ {"list", "related" } }))
                    count++;
                }
            </div>
        </div>
    </section>
}
@if (Model?.SingleKnowledgeEventsRelatedSolutions != null && Model.SingleKnowledgeEventsRelatedSolutions)
{
    var allSol = Model.Root()?.DescendantsOfType("Solutions");
    if (allSol != null)
    {
        <section class="minicards-block bg pb-120" id="solutions">
            <div class="container-lg">
                @if (!string.IsNullOrEmpty(Model.SingleKnowledgeEventsRelatedSolutionsTitle))
                {
                <div class="row justify-content-center">
                    <div class="col-7 col-lg-12">
                        <h2 class="h2 text-center pb-lg-5 mb-lg-4">@Model.SingleKnowledgeEventsRelatedSolutionsTitle</h2>
                    </div>
                </div>
                }
                <div class="row g-mega g-overflow">
                    @if (allSol != null && allSol.Any())
                    {
                        foreach (Solutions sol in allSol)
                        {
                            <div class="col-12 col-lg-6 solution">
                                <div class="custom-card shadow">
                                    <div class="img-wrapper"><img src="@sol?.HeroBackground?.Url()" alt="@HtmlUtils.GetImageAlt(sol?.HeroBackground)"></div>
                                    <div class="card-body">
                                        <h3 class="h3 card-title pb-1">@sol?.HeroTitle</h3>
                                        @*<p>@sol?.SolutionAbstract</p>*@
                                        <a title="@Umbraco.GetDictionaryValue("solution_read_more")" href="@sol?.Url()" class="more">@Umbraco.GetDictionaryValue("solution_read_more")</a>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </section>
    }
}

@Html.GetBlockListHtml(Model?.SingleKnowledgeEventsLatestBlock)

@if (Model?.ShowFixedBanner != null && Model.ShowFixedBanner)
{
    <section class="full-article sticky-bottom">
        <div class="container-lg">
            <div class="row justify-content-center">
                <div class="col-12">
                    <div class="banner">
                        <h3 class="h3 m-0">@Model.BannerText</h3>
                        @{
                            string? myurl = Model.BannerCta?.Url;
                            if (!string.IsNullOrEmpty(addParam) && myurl != null && !myurl.Contains("?"))
                            {
                                myurl += "?" + addParam;
                            }
                            else if (!string.IsNullOrEmpty(addParam) && myurl != null && !(myurl.Contains("?product") || myurl.Contains("&product")))
                            {
                                myurl += "&" + addParam;
                            }
                        }
                        <a title="@Model.BannerCta?.Name" href="@myurl" class="btn btn-primary btn-large" target="@Model.BannerCta?.Target" data-link-type="cta" data-link="@Model.BannerCta?.Name" data-section="fixed-bottom-banner">@Model.BannerCta?.Name</a>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<script type="application/ld+json">
    {
    "@@context": "https://schema.org",
    "@@type": "NewsArticle",
    "mainEntityOfPage": {
    "@@type": "WebPage",
    "@@id": "@url"
    },
    "headline": "@Model.SingleNewsEventsTitle",
    "image": [
    "@Model.SingleKnowledgeEventsCoverImage?.Url()",
    "https://www.crif.com/photos/4x3/photo.jpg",
    "https://www.crif.com/photos/16x9/photo.jpg"
    ],
    "datePublished": "@Model.CreateDate",
    "dateModified": "@Model.UpdateDate",
    "author": {
    "@@type": "Person",
    "name": "Artemisia Gentileschi"
    },
    "publisher": {
    "@@type": "Organization",
    "name": "CRIF",
    "logo": {
    "@@type": "ImageObject",
    "url": "https://www.crif.com/assets/img/logo-crif.svg"
    }
    }
    }
</script>